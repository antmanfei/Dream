Swift Model Property set value
let mirror:Mirror = Mirror.init(reflecting: self)
for p in mirror.children {
    copyModel.setValue(p.value, forKey: p.label!)
}

3，Swift中的反射
在Swift中并不提倡使用Runtime，而是像其他语言一样使用反射(Reflect)。当然，目前Swift中的反射还没有其他语言中的反射功能强大，不仅远不及OC的Runtime，离Java的反射也有一定的距离。
Swift的反射机制是基于一个叫 Mirror 的 struct 来实现的，其内部有如下属性和方法：

let children: Children   //对象的子节点。
displayStyle: Mirror.DisplayStyle?   //对象的展示风格
let subjectType: Any.Type   //对象的类型
func superclassMirror() -> Mirror?   //对象父类的 mirror

4，Swift反射的使用样例

样例1：输出实体对象的类名，属性个数，以及所有属性的属性名和属性值。
首先定义一个用户类：

//用户类
class User {
    var name:String = ""  //姓名
    var nickname:String?  //昵称
    var age:Int?   //年龄
    var emails:[String]?  //邮件地址
}
接着创建一个用户对象，并通过反射获取这个对象的信息：
//创建一个User实例对象
let user1 = User()
user1.name = "hangge"
user1.age = 100
user1.emails = ["hangge@hangge.com","system@hangge.com"]
         
//将user对象进行反射
let hMirror = Mirror(reflecting: user1)
         
print("对象类型：\(hMirror.subjectType)")
print("对象子元素个数：\(hMirror.children.count)")
         
print("--- 对象子元素的属性名和属性值分别如下 ---")
for case let (label?, value) in hMirror.children {
    print("属性：\(label)     值：\(value)")
}

原文出自：www.hangge.com  转载请保留原文链接：http://www.hangge.com/blog/cache/detail_976.html

//根据属性名字符串获取属性值
func getValueByKey(obj:AnyObject, key: String) -> Any {
    let hMirror = Mirror(reflecting: obj)
    for case let (label?, value) in hMirror.children {
        if label == key {
            return unwrap(value)
        }
    }
    return NSNull()
}
 
//将可选类型（Optional）拆包
func unwrap(any:Any) -> Any {
    let mi = Mirror(reflecting: any)
    if mi.displayStyle != .Optional {
        return any
    }
     
    if mi.children.count == 0 { return any }
    let (_, some) = mi.children.first!
    return some
}


//创建一个User实例对象
let user1 = User()
user1.name = "hangge"
user1.age = 100
user1.emails = ["hangge@hangge.com","system@hangge.com"]
 
//通过属性名字符串获取对应的值
let name = getValueByKey(user1, key: "name")
let nickname = getValueByKey(user1, key: "nickname")
let age = getValueByKey(user1, key: "age")
let emails = getValueByKey(user1, key: "emails")
let tel = getValueByKey(user1, key: "tel")
print(name, nickname, age, emails, tel)
 
//当然对于获取到的值也可以进行类型判断
if name is NSNull {
    print("name这个属性不存在")
}else if (name as? AnyObject) == nil {
    print("name这个属性是个可选类型，且为nil")
}else if name is String {
    print("name这个属性String类型，其值为：\(name)")
}
 
if nickname is NSNull {
    print("nickname这个属性不存在")
}else if (nickname as? AnyObject) == nil {
    print("nickname这个属性是个可选类型，且为nil")
}else if nickname is String {
    print("nickname这个属性String类型，其值为：\(nickname)")
}
 
if tel is NSNull {
    print("tel这个属性不存在")
}else if (tel as? AnyObject) == nil {
    print("tel这个属性是个可选类型，且为nil")
}else if tel is String {
    print("tel这个属性String类型，其值为：\(tel)")
}
